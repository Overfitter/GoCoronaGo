{"version":3,"sources":["data/data.ts","QuestionView.tsx","TaskView.tsx","Tasks.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["data","useStyles","makeStyles","title","marginTop","card","marginBottom","QuestionView","question","classes","Typography","variant","className","results","map","result","before","context","slice","start_index","answer","end_index","after","Card","CardContent","display","color","TaskView","task","useState","questionIndex","setQuestionIndex","Select","value","onChange","e","target","questions","index","MenuItem","undefined","Tasks","taskIndex","setTaskIndex","theme","createMuiTheme","palette","primary","main","secondary","logo","marginRight","appBarSpacer","mixins","toolbar","content","flexGrow","height","overflow","container","paddingTop","spacing","paddingBottom","paper","padding","flexDirection","App","ThemeProvider","AppBar","Toolbar","role","aria-label","href","data-ribbon","Container","Paper","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gRAsBeA,E,MADUA,K,mCCbnBC,EAAYC,IAAW,CAC3BC,MAAO,CACLC,UAAW,IAEbC,KAAM,CACJD,UAAW,GACXE,aAAc,MAyCHC,EArCwC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClDC,EAAUR,IAEhB,OACE,oCACE,kBAACS,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAWH,EAAQN,OAA5C,UACMK,EAASA,SADf,MAICA,EAASK,QAAQC,KAAI,SAAAC,GACpB,IAAMC,EAASD,EAAOE,QAAQC,MAAM,EAAGH,EAAOI,aACxCC,EAASL,EAAOE,QAAQC,MAC5BH,EAAOI,YACPJ,EAAOM,WAEHC,EAAQP,EAAOE,QAAQC,MAAMH,EAAOM,WAAY,GAEtD,OACE,kBAACE,EAAA,EAAD,CAAMX,UAAWH,EAAQJ,KAAMM,QAAQ,YACrC,kBAACa,EAAA,EAAD,KACE,kBAACd,EAAA,EAAD,CAAYe,QAAQ,SAASd,QAAQ,SAClCK,GAEH,kBAACN,EAAA,EAAD,CAAYe,QAAQ,SAASd,QAAQ,QAAQe,MAAM,WACjD,2BAAIN,IAEN,kBAACV,EAAA,EAAD,CAAYe,QAAQ,SAASd,QAAQ,SAClCW,UCpCXrB,EAAYC,IAAW,CAC3BC,MAAO,CACLC,UAAW,MA6BAuB,EAzB4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACtCnB,EAAUR,IADuC,EAEb4B,qBAFa,mBAEhDC,EAFgD,KAEjCC,EAFiC,KAIvD,OACE,oCACE,kBAACrB,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAWH,EAAQN,OAA5C,qBAGA,kBAAC6B,EAAA,EAAD,CACEC,MAAOH,EACPI,SAAU,SAAAC,GAAC,OAAIJ,EAAiBI,EAAEC,OAAOH,SAExCL,EAAKS,UAAUvB,KAAI,SAACN,EAAU8B,GAAX,OAClB,kBAACC,EAAA,EAAD,CAAUN,MAAOK,GAAQ9B,EAASA,mBAInBgC,IAAlBV,GACC,kBAAC,EAAD,CAActB,SAAUoB,EAAKS,UAAUP,OCNhCW,EApBa,WAAO,IAAD,EACEZ,qBADF,mBACzBa,EADyB,KACdC,EADc,KAGhC,OACE,oCACE,kBAACjC,EAAA,EAAD,CAAYC,QAAQ,MAApB,iBACA,kBAACqB,EAAA,EAAD,CACEC,MAAOS,EACPR,SAAU,SAAAC,GAAC,OAAIQ,EAAaR,EAAEC,OAAOH,SAEpCjC,EAAKc,KAAI,SAACc,EAAMU,GAAP,OACR,kBAACC,EAAA,EAAD,CAAUN,MAAOK,GAAQV,EAAKA,eAInBY,IAAdE,GAA2B,kBAAC,EAAD,CAAUd,KAAM5B,EAAK0C,OCRjDE,G,OAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CAAEC,KAAM,WACjBC,UAAW,CAAED,KAAM,eAIjB/C,EAAYC,aAAW,SAAA0C,GAAK,MAAK,CACrCM,KAAM,CACJC,YAAa,IAGfC,aAAcR,EAAMS,OAAOC,QAC3BC,QAAS,CACPC,SAAU,EACVC,OAAQ,QACRC,SAAU,QAEZC,UAAW,CACTC,WAAYhB,EAAMiB,QAAQ,GAC1BC,cAAelB,EAAMiB,QAAQ,IAE/BE,MAAO,CACLC,QAASpB,EAAMiB,QAAQ,GACvBpC,QAAS,OACTiC,SAAU,OACVO,cAAe,cA8BJC,EA1BW,WACxB,IAAMzD,EAAUR,IAChB,OACE,kBAACkE,EAAA,EAAD,CAAevB,MAAOA,GACpB,kBAACwB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC3D,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAWH,EAAQyC,MAC1C,0BAAMoB,KAAK,MAAMC,aAAW,OAA5B,iBAIF,kBAAC7D,EAAA,EAAD,CAAYC,QAAQ,MAApB,qEAGJ,0BAAMC,UAAWH,EAAQ8C,SACvB,uBAAG3C,UAAU,qBAAqB4D,KAAK,2CAA2CC,cAAY,oBAAoBtE,MAAM,qBAAxH,qBACA,yBAAKS,UAAWH,EAAQ2C,eACxB,kBAACsB,EAAA,EAAD,CAAW9D,UAAWH,EAAQkD,WAC5B,kBAACgB,EAAA,EAAD,CAAO/D,UAAWH,EAAQsD,OACxB,kBAAC,EAAD,WCpDQa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.36426838.chunk.js","sourcesContent":["import raw from \"./data.json\"\r\n\r\nexport interface Result {\r\n  context: string\r\n  answer: string\r\n  start_index: number\r\n  end_index: number\r\n}\r\n\r\nexport interface Question {\r\n  question: string\r\n  summary_answer?: string\r\n  summary_context?: string\r\n  results: Result[]\r\n}\r\n\r\nexport interface Task {\r\n  task: string\r\n  questions: Question[]\r\n}\r\n\r\nconst data: Task[] = raw.data\r\nexport default data\r\n","import React from \"react\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Card from \"@material-ui/core/Card\"\r\nimport CardContent from \"@material-ui/core/CardContent\"\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\"\r\n\r\nimport { Question } from \"./data/data\"\r\n\r\nconst useStyles = makeStyles({\r\n  title: {\r\n    marginTop: 40\r\n  },\r\n  card: {\r\n    marginTop: 20,\r\n    marginBottom: 20\r\n  }\r\n})\r\n\r\nconst QuestionView: React.FC<{ question: Question }> = ({ question }) => {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h5\" className={classes.title}>\r\n        {`${question.question}?`}\r\n      </Typography>\r\n\r\n      {question.results.map(result => {\r\n        const before = result.context.slice(0, result.start_index)\r\n        const answer = result.context.slice(\r\n          result.start_index,\r\n          result.end_index\r\n        )\r\n        const after = result.context.slice(result.end_index, -1)\r\n\r\n        return (\r\n          <Card className={classes.card} variant=\"outlined\">\r\n            <CardContent>\r\n              <Typography display=\"inline\" variant=\"body1\">\r\n                {before}\r\n              </Typography>\r\n              <Typography display=\"inline\" variant=\"body1\" color=\"primary\">\r\n                <b>{answer}</b>\r\n              </Typography>\r\n              <Typography display=\"inline\" variant=\"body1\">\r\n                {after}\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        )\r\n      })}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default QuestionView\r\n","import React, { useState } from \"react\"\r\nimport Select from \"@material-ui/core/Select\"\r\nimport MenuItem from \"@material-ui/core/MenuItem\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\"\r\n\r\nimport { Task } from \"./data/data\"\r\nimport QuestionView from \"./QuestionView\"\r\n\r\nconst useStyles = makeStyles({\r\n  title: {\r\n    marginTop: 40\r\n  }\r\n})\r\n\r\nconst TaskView: React.FC<{ task: Task }> = ({ task }) => {\r\n  const classes = useStyles()\r\n  const [questionIndex, setQuestionIndex] = useState<number | undefined>()\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h6\" className={classes.title}>\r\n        Select a question\r\n      </Typography>\r\n      <Select\r\n        value={questionIndex}\r\n        onChange={e => setQuestionIndex(e.target.value as number)}\r\n      >\r\n        {task.questions.map((question, index) => (\r\n          <MenuItem value={index}>{question.question}</MenuItem>\r\n        ))}\r\n      </Select>\r\n\r\n      {questionIndex !== undefined && (\r\n        <QuestionView question={task.questions[questionIndex]} />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default TaskView\r\n","import React, { useState } from \"react\"\r\nimport Select from \"@material-ui/core/Select\"\r\nimport MenuItem from \"@material-ui/core/MenuItem\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\n\r\nimport data from \"./data/data\"\r\nimport TaskView from \"./TaskView\"\r\n\r\nconst Tasks: React.FC<{}> = () => {\r\n  const [taskIndex, setTaskIndex] = useState<number | undefined>()\r\n\r\n  return (\r\n    <>\r\n      <Typography variant=\"h6\">Select a task</Typography>\r\n      <Select\r\n        value={taskIndex}\r\n        onChange={e => setTaskIndex(e.target.value as number)}\r\n      >\r\n        {data.map((task, index) => (\r\n          <MenuItem value={index}>{task.task}</MenuItem>\r\n        ))}\r\n      </Select>\r\n\r\n      {taskIndex !== undefined && <TaskView task={data[taskIndex]} />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Tasks\r\n","import React from \"react\"\r\nimport AppBar from \"@material-ui/core/AppBar\"\r\nimport Toolbar from \"@material-ui/core/Toolbar\"\r\nimport Typography from \"@material-ui/core/Typography\"\r\nimport Container from \"@material-ui/core/Container\"\r\nimport Paper from \"@material-ui/core/Paper\"\r\nimport {\r\n  createMuiTheme,\r\n  makeStyles,\r\n  ThemeProvider\r\n} from \"@material-ui/core/styles\"\r\n\r\nimport Tasks from \"./Tasks\"\r\nimport './css/gh-fork-ribbon.css';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: { main: \"#0c3fbf\" },\r\n    secondary: { main: \"#ed8b00\" }\r\n  }\r\n})\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  logo: {\r\n    marginRight: 20\r\n  },\r\n\r\n  appBarSpacer: theme.mixins.toolbar,\r\n  content: {\r\n    flexGrow: 1,\r\n    height: \"100vh\",\r\n    overflow: \"auto\"\r\n  },\r\n  container: {\r\n    paddingTop: theme.spacing(4),\r\n    paddingBottom: theme.spacing(4)\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    display: \"flex\",\r\n    overflow: \"auto\",\r\n    flexDirection: \"column\"\r\n  }\r\n}))\r\n\r\nconst App: React.FC<{}> = () => {\r\n  const classes = useStyles()\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <AppBar>\r\n        <Toolbar>\r\n          <Typography variant=\"h3\" className={classes.logo}>\r\n            <span role=\"img\" aria-label=\"img\">\r\n              ðŸ˜·\r\n            </span>\r\n          </Typography>\r\n          <Typography variant=\"h5\">GoCoronaGo - COVID-19 Open Research Dataset Challenge (CORD-19)</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <main className={classes.content}>\r\n        <a className=\"github-fork-ribbon\" href=\"https://github.com/Overfitter/GoCoronaGo\" data-ribbon=\"Fork me on GitHub\" title=\"Fork me on GitHub\">Fork me on GitHub</a>\r\n        <div className={classes.appBarSpacer} />\r\n        <Container className={classes.container}>\r\n          <Paper className={classes.paper}>\r\n            <Tasks />\r\n          </Paper>\r\n        </Container>\r\n      </main>\r\n    </ThemeProvider>\r\n  )\r\n}\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\"\r\n\r\nimport App from \"./App\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <CssBaseline />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}